{"ast":null,"code":"var _jsxFileName = \"/Users/pedropbazzo/Downloads/react-apollo-graphql-github/src/App.js\";\n// React\nimport React, { Component } from 'react'; // Apollo\n\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-client';\nimport createNetworkInterface from 'apollo-client'; // Auth\n\nimport { login } from './githubLogin';\nimport { username, password } from './config'; // App.Components\n\nimport Repository from './repository'; // Global.Auth\n\nlet TOKEN = null; // Global.Apollo\n\nconst networkInterface = createNetworkInterface('https://api.github.com/graphql');\nnetworkInterface.use([{\n  applyMiddleware(req, next) {\n    if (!req.options.headers) {\n      req.options.headers = {}; // Create the header object if needed.\n    } // Send the login token in the Authorization header\n\n\n    req.options.headers.authorization = \"Bearer \".concat(TOKEN);\n    next();\n  }\n\n}]);\nconst client = new ApolloClient({\n  networkInterface\n}); // App\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      login: false\n    };\n  }\n\n  componentDidMount() {\n    if (username === 'xxx') {\n      throw new Error('Please create a config.js your username and password.');\n    }\n\n    login(username, password).then(token => {\n      TOKEN = token;\n      this.setState({\n        login: true\n      });\n    });\n  }\n\n  routeForRepository(login, name) {\n    return {\n      title: \"\".concat(login, \"/\").concat(name),\n      component: Repository,\n      login,\n      name\n    };\n  }\n\n  render() {\n    // Log in state\n    if (!this.state.login) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Login...\");\n    } // Logged in, fetch from Github\n\n\n    return this.state.login ? React.createElement(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Repository, Object.assign({}, this.routeForRepository('facebook', 'react'), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }))) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Logging in...\");\n  }\n\n}","map":{"version":3,"sources":["/Users/pedropbazzo/Downloads/react-apollo-graphql-github/src/App.js"],"names":["React","Component","ApolloProvider","ApolloClient","createNetworkInterface","login","username","password","Repository","TOKEN","networkInterface","use","applyMiddleware","req","next","options","headers","authorization","client","App","constructor","state","componentDidMount","Error","then","token","setState","routeForRepository","name","title","component","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,sBAAP,MAAmC,eAAnC,C,CAEA;;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,UAAnC,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,IAAIC,KAAK,GAAG,IAAZ,C,CAEA;;AACA,MAAMC,gBAAgB,GAAGN,sBAAsB,CAAC,gCAAD,CAA/C;AAEAM,gBAAgB,CAACC,GAAjB,CAAqB,CACnB;AACEC,EAAAA,eAAe,CAAEC,GAAF,EAAOC,IAAP,EAAa;AAC1B,QAAI,CAACD,GAAG,CAACE,OAAJ,CAAYC,OAAjB,EAA0B;AACxBH,MAAAA,GAAG,CAACE,OAAJ,CAAYC,OAAZ,GAAsB,EAAtB,CADwB,CACC;AAC1B,KAHyB,CAK1B;;;AACAH,IAAAA,GAAG,CAACE,OAAJ,CAAYC,OAAZ,CAAoBC,aAApB,oBAA8CR,KAA9C;AACAK,IAAAA,IAAI;AACL;;AATH,CADmB,CAArB;AAcA,MAAMI,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BO,EAAAA;AAD8B,CAAjB,CAAf,C,CAIA;;AACA,eAAe,MAAMS,GAAN,SAAkBlB,SAAlB,CAA4B;AACzCmB,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,KAAL,GAAa;AAAEhB,MAAAA,KAAK,EAAE;AAAT,KAAb;AACD;;AAEDiB,EAAAA,iBAAiB,GAAI;AACnB,QAAIhB,QAAQ,KAAK,KAAjB,EAAwB;AACtB,YAAM,IAAIiB,KAAJ,CAAU,uDAAV,CAAN;AACD;;AACDlB,IAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,CAAL,CAA0BiB,IAA1B,CAA+BC,KAAK,IAAI;AACtChB,MAAAA,KAAK,GAAGgB,KAAR;AACA,WAAKC,QAAL,CAAc;AAAErB,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAHD;AAID;;AAEDsB,EAAAA,kBAAkB,CAAEtB,KAAF,EAASuB,IAAT,EAAe;AAC/B,WAAO;AACLC,MAAAA,KAAK,YAAKxB,KAAL,cAAcuB,IAAd,CADA;AAELE,MAAAA,SAAS,EAAEtB,UAFN;AAGLH,MAAAA,KAHK;AAILuB,MAAAA;AAJK,KAAP;AAMD;;AAEDG,EAAAA,MAAM,GAAI;AACR;AACA,QAAI,CAAC,KAAKV,KAAL,CAAWhB,KAAhB,EAAuB;AACrB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,KAJO,CAMR;;;AACA,WAAO,KAAKgB,KAAL,CAAWhB,KAAX,GACH,oBAAC,cAAD;AAAgB,MAAA,MAAM,EAAEa,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD,oBAAgB,KAAKS,kBAAL,CAAwB,UAAxB,EAAoC,OAApC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADA,CADG,GAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJJ;AAKD;;AArCwC","sourcesContent":["// React\nimport React, { Component } from 'react'\n\n// Apollo\nimport { ApolloProvider } from 'react-apollo'\nimport ApolloClient from 'apollo-client'\nimport createNetworkInterface from 'apollo-client'\n\n// Auth\nimport { login } from './githubLogin'\nimport { username, password } from './config'\n\n// App.Components\nimport Repository from './repository'\n\n// Global.Auth\nlet TOKEN = null\n\n// Global.Apollo\nconst networkInterface = createNetworkInterface('https://api.github.com/graphql')\n\nnetworkInterface.use([\n  {\n    applyMiddleware (req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {} // Create the header object if needed.\n      }\n\n      // Send the login token in the Authorization header\n      req.options.headers.authorization = `Bearer ${TOKEN}`\n      next()\n    }\n  }\n])\n\nconst client = new ApolloClient({\n  networkInterface\n})\n\n// App\nexport default class App extends Component {\n  constructor () {\n    super()\n    this.state = { login: false }\n  }\n\n  componentDidMount () {\n    if (username === 'xxx') {\n      throw new Error('Please create a config.js your username and password.')\n    }\n    login(username, password).then(token => {\n      TOKEN = token\n      this.setState({ login: true })\n    })\n  }\n\n  routeForRepository (login, name) {\n    return {\n      title: `${login}/${name}`,\n      component: Repository,\n      login,\n      name\n    }\n  }\n\n  render () {\n    // Log in state\n    if (!this.state.login) {\n      return <p>Login...</p>\n    }\n\n    // Logged in, fetch from Github\n    return this.state.login\n      ? <ApolloProvider client={client}>\n        <Repository {...this.routeForRepository('facebook', 'react')} />\n      </ApolloProvider>\n      : <p>Logging in...</p>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}